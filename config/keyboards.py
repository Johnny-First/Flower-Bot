from aiogram import types
from typing import Dict
from ..database.models import CategoryManager, FlowerManager

def get_my_keyboard(role: str, data: Dict[str, str]) -> types.InlineKeyboardMarkup:
    buttons = []
    row = []
    for name, callback in data.items():  
        row.append(types.InlineKeyboardButton(
            text=name, 
            callback_data=f"{role}{callback}"
        ))
        if len(row) == 2:  
            buttons.append(row)
            row = []
    if row:  
        buttons.append(row)
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_base_keyboard():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å —Ü–≤–µ—Ç—ã", callback_data="catalog")]
        ]
    )

def get_admin_keyboard():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_mailing"),
             types.InlineKeyboardButton(text="–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º", callback_data="admin_interact_catalog")],
            [types.InlineKeyboardButton(text="üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤—ã—Ö –∫ –∑–∞–∫–∞–∑—É", callback_data="admin_orders")],
            [types.InlineKeyboardButton(text="üìä –í—Å–µ –∑–∞–∫–∞–∑—ã (–≤–∫–ª—é—á–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)", callback_data="admin_all_orders")]
        ]
    )

def get_pay_keyboard():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="check_cart")],
            [types.InlineKeyboardButton(text="–í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
        ]
    )
async def admin_get_categories_keyboard():
    categories = await CategoryManager.get_all_categories()
    buttons = []
    row = []
    for category_id in categories:
        row.append(types.InlineKeyboardButton(text=category_id[0], callback_data=f"{category_id[1]}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    buttons.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_interact_catalog")])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

async def get_categories_keyboard():
    categories = await CategoryManager.get_available_categories()
    buttons = []
    row = []
    if not categories:
        buttons.append([types.InlineKeyboardButton(text="–ü—Ä–æ—Å—Ç–∏—Ç–µ, —Ü–≤–µ—Ç—ã –∫–æ–Ω—á–∏–ª–∏—Å—å! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞)", callback_data="no_categories")])
    else:
        for category_id in categories:
            row.append(types.InlineKeyboardButton(text=category_id[0], callback_data=f"category_{category_id[1]}"))
            if len(row) == 2:
                buttons.append(row)
                row = []
        if row:
            buttons.append(row)
    buttons.append([types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="check_cart")])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

async def get_flowers_keyboard(category_id):
    flowers = await FlowerManager.get_flowers_by_category(category_id)
    buttons = []
    
    if not flowers:
        buttons.append([types.InlineKeyboardButton(text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ü–≤–µ—Ç–æ–≤", callback_data="no_flowers")])
    else:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç—ã –Ω–∞ —Ç–µ, —á—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏ –∏ –Ω–µ—Ç
        in_stock_flowers = []
        out_of_stock_flowers = []
        
        for flower in flowers:
            # flower[6] - –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ 7-–π —ç–ª–µ–º–µ–Ω—Ç (in_stock), –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0
            if flower[6] == 1:  # –≤ –Ω–∞–ª–∏—á–∏–∏
                in_stock_flowers.append(flower)
            else:  # –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
                out_of_stock_flowers.append(flower)
        row = []
        for flower in in_stock_flowers:
            row.append(types.InlineKeyboardButton(text=flower[1], callback_data=f"flower_{flower[0]}"))
            if len(row) == 2:
                buttons.append(row)
                row = []
        if row:
            buttons.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —Ü–≤–µ—Ç–æ–≤ –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏
        if out_of_stock_flowers:
            buttons.append([types.InlineKeyboardButton(text="–ù–ï–¢ –í –ù–ê–õ–ò–ß–ò–ò:", callback_data="out_of_stock_header")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç—ã –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏
            row = []
            for flower in out_of_stock_flowers:
                row.append(types.InlineKeyboardButton(text= flower[1], callback_data=f"flower_{flower[0]}"))
                if len(row) == 2:
                    buttons.append(row)
                    row = []
            if row:
                buttons.append(row)
    buttons.append([types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="check_cart")])
    buttons.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="catalog")])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

async def admin_get_flowers_keyboard(category_id):
    flowers = await FlowerManager.get_flowers_by_category(category_id)
    buttons = []
    
    if not flowers:
        buttons.append([types.InlineKeyboardButton(text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ü–≤–µ—Ç–æ–≤", callback_data="no_flowers")])
    else:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç—ã –Ω–∞ —Ç–µ, —á—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏ –∏ –Ω–µ—Ç
        in_stock_flowers = []
        out_of_stock_flowers = []
        
        for flower in flowers:
            if flower[6] == 1:  # –≤ –Ω–∞–ª–∏—á–∏–∏
                in_stock_flowers.append(flower)
            else:  # –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
                out_of_stock_flowers.append(flower)
        
        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç—ã –≤ –Ω–∞–ª–∏—á–∏–∏
        row = []
        for flower in in_stock_flowers:
            row.append(types.InlineKeyboardButton(text=flower[1], callback_data=f"{flower[0]}"))
            if len(row) == 2:
                buttons.append(row)
                row = []
        if row:
            buttons.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —Ü–≤–µ—Ç–æ–≤ –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏
        if out_of_stock_flowers:
            buttons.append([types.InlineKeyboardButton(text="–ù–ï–¢ –í –ù–ê–õ–ò–ß–ò–ò:", callback_data="out_of_stock_header")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç—ã –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏
            row = []
            for flower in out_of_stock_flowers:
                row.append(types.InlineKeyboardButton(text=flower[1], callback_data=f"{flower[0]}"))
                if len(row) == 2:
                    buttons.append(row)
                    row = []
            if row:
                buttons.append(row)
    
    buttons.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_interact_catalog")])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_order_keyboard(category_id, flower_id, stock):
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_cart_{flower_id}")],
            [types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–∏–º –¥—Ä—É–≥–∏–µ", callback_data=f"back_{category_id}")]
        ]
    )
