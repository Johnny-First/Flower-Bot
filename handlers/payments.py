from aiogram import Dispatcher, types, F
from ..services import CartManager
from ..config import get_pay_keyboard
from ..database.models import FlowerManager
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext 
from aiogram.filters import StateFilter 
import json

class QuantityStates(StatesGroup):
    waiting_state = State()

class CheckoutStates(StatesGroup):
    waiting_phone = State()
    waiting_name = State()

class PaymentHandlers:
    def __init__(self, dp: Dispatcher):
        dp.callback_query.register(self.payment_handler, F.data.startswith("add_cart"))
        dp.callback_query.register(self.list_cart, F.data == "check_cart")
        dp.callback_query.register(self.clear_cart, F.data == "clear_cart")
        dp.callback_query.register(self.checkout_handler, F.data == "checkout")
        dp.callback_query.register(self.cancel_checkout, F.data == "cancel_checkout")
        dp.message.register(
            self.quantity_input_handler,
            StateFilter(QuantityStates.waiting_state)
        )
        dp.message.register(
            self.phone_input_handler,
            StateFilter(CheckoutStates.waiting_phone)
        )
        dp.message.register(
            self.name_input_handler,
            StateFilter(CheckoutStates.waiting_name)
        )
    async def list_cart(self, callback: types.CallbackQuery):
        
        try:
            from ..database.models import UserManager
            
            cart = await UserManager.get_cart(user_id=callback.from_user.id)
            items = cart['items']
            total_price = cart['total_price']
            
            if not items:
                caption = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
            else:
                caption = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
                for item in items:
                    name = item['name']
                    quantity = item['quantity']
                    price = item['price']
                    item_total = quantity * price
                    caption += f"üåπ {name}: {quantity} —à—Ç. √ó {price}‚ÇΩ = {item_total}‚ÇΩ\n"
                
                caption += f"\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price}‚ÇΩ"
            
            await callback.message.edit_media(
                media=types.InputMediaPhoto(
                    media=callback.message.photo[-1].file_id if callback.message.photo else "AgACAgIAAxkBAAMQaHGe30jHWjEc3XIWhpNWHIgLWroAAsn-MRsbo5BLMRbcsf9Zu8MBAAMCAAN4AAM2BA",
                    caption=caption
                ),
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
                        [types.InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
                        [types.InlineKeyboardButton(text="–í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
                    ]
                )
            )
            await callback.answer()
            
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {str(e)}", show_alert=True)

    async def clear_cart(self, callback: types.CallbackQuery):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from ..database.models import UserManager
            
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            success = await UserManager.clear_cart(user_id=callback.from_user.id)
            
            if success:
                await callback.message.edit_media(
                    media=types.InputMediaPhoto(
                        media=callback.message.photo[-1].file_id if callback.message.photo else "AgACAgIAAxkBAAMQaHGe30jHWjEc3XIWhpNWHIgLWroAAsn-MRsbo5BLMRbcsf9Zu8MBAAMCAAN4AAM2BA",
                        caption="‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!"
                    ),
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="–í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
                        ]
                    )
                )
                await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)
                
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {str(e)}", show_alert=True)

    async def checkout_handler(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        try:
            from ..database.models import UserManager
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart = await UserManager.get_cart(user_id=callback.from_user.id)
            if not cart['items']:
                await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ state
            await state.update_data(
                cart_items=cart['items'],
                total_price=cart['total_price']
            )
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await state.set_state(CheckoutStates.waiting_phone)
            await callback.message.edit_media(
                media=types.InputMediaPhoto(
                    media=callback.message.photo[-1].file_id if callback.message.photo else "AgACAgIAAxkBAAMQaHGe30jHWjEc3XIWhpNWHIgLWroAAsn-MRsbo5BLMRbcsf9Zu8MBAAMCAAN4AAM2BA",
                    caption="üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
                ),
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_checkout")]
                    ]
                )
            )
            await callback.answer()
            
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}", show_alert=True)

    async def phone_input_handler(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        phone = message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if len(phone) < 10:
            await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        await state.update_data(phone=phone)
        await state.set_state(CheckoutStates.waiting_name)
        
        await message.answer(
            "üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞:",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_checkout")]
                ]
            )
        )

    async def name_input_handler(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
        customer_name = message.text.strip()
        
        if len(customer_name) < 2:
            await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
            data = await state.get_data()
            cart_items = data['cart_items']
            total_price = data['total_price']
            phone = data['phone']
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
            from ..database.models import CheckoutManager
            await CheckoutManager.create_order(
                user_id=message.from_user.id,
                username=message.from_user.username or "",
                first_name=message.from_user.first_name or "",
                last_name=message.from_user.last_name or "",
                phone=phone,
                customer_name=customer_name,
                cart_items=json.dumps(cart_items),
                total_price=total_price
            )
            
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            from ..database.models import UserManager
            await UserManager.clear_cart(user_id=message.from_user.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            await self.notify_admins_about_order(message, cart_items, total_price, customer_name, phone)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
                f"üë§ –ò–º—è: {customer_name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üí∞ –°—É–º–º–∞: {total_price}‚ÇΩ\n\n"
                f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="–í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
                    ]
                )
            )
            
            await state.clear()
            
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
            await state.clear()

    async def notify_admins_about_order(self, message: types.Message, cart_items: list, total_price: float, customer_name: str, phone: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        try:
            import os
            from dotenv import load_dotenv
            load_dotenv()
            
            admin_ids = os.getenv("ADMIN_IDS", "")
            admin_ids = [int(x) for x in admin_ids.split(",") if x.strip()]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
            order_text = f"üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n"
            order_text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {customer_name}\n"
            order_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            order_text += f"üí∞ –°—É–º–º–∞: {total_price}‚ÇΩ\n\n"
            order_text += "üõí –¢–æ–≤–∞—Ä—ã:\n"
            
            for item in cart_items:
                order_text += f"‚Ä¢ {item['name']} √ó {item['quantity']} = {item['quantity'] * item['price']}‚ÇΩ\n"
            

            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in admin_ids:
                try:
                    await message.bot.send_message(
                        admin_id,
                        order_text,
                        reply_markup=types.InlineKeyboardMarkup(
                            inline_keyboard=[
                                [types.InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã", callback_data="admin_orders")]
                            ]
                        )
                    )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {e}")

    async def cancel_checkout(self, callback: types.CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        await state.clear()
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=callback.message.photo[-1].file_id if callback.message.photo else "AgACAgIAAxkBAAMQaHGe30jHWjEc3XIWhpNWHIgLWroAAsn-MRsbo5BLMRbcsf9Zu8MBAAMCAAN4AAM2BA",
                caption="‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            ),
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="–í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
                ]
            )
        )
        await callback.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    async def payment_handler(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        flower_id = int(callback.data.split("_")[-1])
        await state.update_data(flower_id=flower_id)
        await state.set_state(QuantityStates.waiting_state)
        
        category_id = await FlowerManager.get_flower_category(flower_id)
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=callback.message.photo[-1].file_id if callback.message.photo else "AgACAgIAAxkBAAMQaHGe30jHWjEc3XIWhpNWHIgLWroAAsn-MRsbo5BLMRbcsf9Zu8MBAAMCAAN4AAM2BA",
                caption="–°–∫–æ–ª—å–∫–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å —Ü–≤–µ—Ç–æ–≤? (–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ)"
            ),
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="–ù–∞–∑–∞–¥", 
                        callback_data=f"back_{category_id}"
                    )
                ]]
            )
        )
        await callback.answer()

    async def quantity_input_handler(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        try:
            quantity = int(message.text)
            if quantity <= 0:
                await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                return
            
            data = await state.get_data()
            flower_id = data.get('flower_id')
            
            if not flower_id:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ü–≤–µ—Ç–∫–∞")
                return
            
            from ..database.models import UserManager
            await UserManager.to_cart(
                user_id=message.from_user.id,
                new_item={"id": flower_id, "quantity": quantity}
            )
            
            await message.answer(
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —Ü–≤–µ—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É!",
                reply_markup=get_pay_keyboard()
            )
            await state.clear()
            
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            await state.clear() 