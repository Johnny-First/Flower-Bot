from aiogram.fsm.state import StatesGroup, State
from aiogram import F, types, Dispatcher
from aiogram.filters import Command  
from ..config import get_base_keyboard, admin_get_flowers_keyboard, get_my_keyboard, admin_get_categories_keyboard
import sqlite3
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from ..database.models import FlowerManager, CategoryManager
from ..config import get_admin_keyboard
from ..config.settings import settings

class AdminStates(StatesGroup):
    waiting_broadcast = State() 
    waiting_new_category_name = State()
    waiting_new_category_photo = State()
    waiting_flower_name = State()
    waiting_flower_price = State()
    waiting_flower_caption = State()
    waiting_flower_photo = State()
    waiting_flower_category = State()
    waiting_category_delete = State()
    waiting_flower_delete = State()
    waiting_to_stop = State()

class AdminHandlers:
    def __init__(self, dp: Dispatcher):
        self.admin_ids = [int(x) for x in settings.ADMIN_IDS.split(",") if x.strip()]

        dp.message.register(self.admin_panel, Command("admin"))
        dp.callback_query.register(self.admin_panel_callback, F.data == "admin")        

        dp.callback_query.register(
            self.admin_action_callback,
            F.data.startswith("admin") 
        )

        dp.message.register(
            self.broadcast_message,
            StateFilter(AdminStates.waiting_broadcast)
        )
        dp.callback_query.register(
            self.stop_flower,
            StateFilter(AdminStates.waiting_to_stop)
        )
        dp.callback_query.register(
            self.remove_category,
            StateFilter(AdminStates.waiting_category_delete)
        )
        dp.callback_query.register(
            self.delete_flower,
            StateFilter(AdminStates.waiting_flower_delete)
        )
        dp.message.register(
            self.process_new_category,
            StateFilter(AdminStates.waiting_new_category_name)
        )
        dp.message.register(
            self.process_new_category_photo,
            StateFilter(AdminStates.waiting_new_category_photo)
        )
        dp.message.register(
            self.process_flower_name,
            StateFilter(AdminStates.waiting_flower_name)
        )
        dp.message.register(
            self.process_flower_price,
            StateFilter(AdminStates.waiting_flower_price)
        )
        dp.message.register(
            self.process_flower_caption,
            StateFilter(AdminStates.waiting_flower_caption)
        )
        dp.message.register(
            self.process_flower_photo,
            StateFilter(AdminStates.waiting_flower_photo)
        )
        dp.message.register(
            self.broadcast_message,
            StateFilter(AdminStates.waiting_broadcast)
        )
        dp.callback_query.register(
            self.flower_category,
            StateFilter(AdminStates.waiting_flower_category)
        )
        dp.callback_query.register(
            self.complete_order,
            F.data.startswith("complete_order_")
        )
        

    async def admin_panel(self, message: types.Message, state: FSMContext):
        await state.clear()        
        if message.from_user.id not in self.admin_ids:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
        await message.answer(
            "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å, –∞–¥–º–∏–Ω?",
            reply_markup=get_admin_keyboard()
        )

    async def admin_panel_callback(self, callback: types.CallbackQuery, state: FSMContext):     
        await state.clear()           
        if callback.from_user.id not in self.admin_ids:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
            return
        await callback.message.edit_text(
            "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å, –∞–¥–º–∏–Ω?",
            reply_markup=get_admin_keyboard()
        )
 

    async def admin_action_callback(self, callback: types.CallbackQuery, state: FSMContext):
        await state.clear()
        data = "_".join(callback.data.split("_")[1:])
        if callback.from_user.id not in self.admin_ids:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        if data == "mailing":
            await callback.message.answer("üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\nüí° –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é - –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_interact_catalog")]]))
            await state.set_state(AdminStates.waiting_broadcast)
            await callback.answer()
            
        elif data == "interact_catalog":
            await state.clear()
            await callback.message.edit_text("–û–ø—Ü–∏–∏:", reply_markup=get_my_keyboard(
                "admin", 
                {
                    "–î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é": "_category_add",
                    "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é": "_category_remove",
                    "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä": "_flower_add",
                    "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç–æ–ø/–≤—ã–≤–µ—Å—Ç–∏ –∏–∑ —Å—Ç–æ–ø–∞ —Ç–æ–≤–∞—Ä": "_flower_stop",
                    "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä": "_flower_remove",
                    "–ù–∞–∑–∞–¥": ""
                }
            ))
            await callback.answer()
            
        elif data == "category_add":
            await callback.message.edit_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[
                        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_interact_catalog")
                    ]]
                )
            )
            await state.set_state(AdminStates.waiting_new_category_name)
            await callback.answer()
        
        elif data == "category_remove":
            await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å.\n–í–Ω–∏–º–∞–Ω–∏–µ! "
                                             "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ü–≤–µ—Ç—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "
                                             "–Ω–∞ —Å—Ç–æ–ø –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—É–Ω–∫—Ç–æ–º –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=await admin_get_categories_keyboard())
            await state.set_state(AdminStates.waiting_category_delete)
            
            await callback.answer()
        
        elif data == "flower_add":
            await callback.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–æ–∫",  reply_markup=await admin_get_categories_keyboard())
            await state.set_state(AdminStates.waiting_flower_category)
            await state.update_data(action="add")
            await callback.answer()
        elif data == 'flower_remove':
            await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=await admin_get_categories_keyboard())
            await state.set_state(AdminStates.waiting_flower_category)
            await state.update_data(action="remove")
            await callback.answer()
        elif data == 'flower_stop':
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=await admin_get_categories_keyboard())
            await state.set_state(AdminStates.waiting_flower_category)
            await state.update_data(action="stop")
            await callback.answer()
        elif data == "orders":
            await self.show_orders(callback)
            await callback.answer()
        elif data == "all_orders":
            await self.show_all_orders(callback)
            await callback.answer()
        elif callback.data == "admin_flower_add":
            await callback.message.edit_text(
                "üåπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∫–∞\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞:",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_interact_catalog")]
                    ]
                )
            )
            await state.set_state(AdminStates.waiting_flower_name)
            await callback.answer()
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

    async def flower_category(self, callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()  
        action = data.get("action")    
        category_id = int(callback.data)
        await state.update_data(category_id=category_id)
        
        if action == "add":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞
            await state.update_data(flower_category_id=category_id)
            await state.set_state(AdminStates.waiting_flower_name)
            await callback.message.edit_text(
                "üåπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∫–∞\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞:",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_interact_catalog")]
                    ]
                )
            )
        elif action == "remove":
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=await admin_get_flowers_keyboard(category_id=category_id))
            await state.set_state(AdminStates.waiting_flower_delete)
        elif action == "stop":
            await callback.message.edit_text(text="–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –∑–∞–ø—É—Å–∫–∞–µ–º/—Å—Ç–æ–ø–∏–º?", reply_markup=await admin_get_flowers_keyboard(category_id=category_id))
            await state.set_state(AdminStates.waiting_to_stop)
        
        await callback.answer()

    async def complete_order(self, callback: types.CallbackQuery):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π"""
        try:
            from ..database.models import CheckoutManager
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data: "complete_order_123" -> 123
            order_id = int(callback.data.split("_")[-1])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "completed"
            await CheckoutManager.update_order_status(order_id, "completed")
            
            await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π!", show_alert=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (—É–±–∏—Ä–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π)
            await self.show_orders(callback)
            
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}", show_alert=True)

    async def stop_flower(self, callback: types.CallbackQuery, state: FSMContext):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback.data —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ–≤–æ–π ID —Ü–≤–µ—Ç–∫–∞
            if not callback.data.isdigit():
                await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ü–≤–µ—Ç–∫–∞", show_alert=True)
                return
                
            flower_id = int(callback.data)
            await FlowerManager.stop_flower(flower_id)
            await callback.message.edit_text("–£—Å–ø–µ—à–Ω–æ! –ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?", reply_markup=get_admin_keyboard())
            await callback.answer()
            await state.set_data({})
            await state.clear()
            
        except ValueError:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ü–≤–µ—Ç–∫–∞", show_alert=True)
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}", show_alert=True)


    async def process_new_category(self, message: types.Message, state: FSMContext):
        input_text = message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(input_text) < 2:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ state
            await state.update_data(category_name=input_text)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await state.set_state(AdminStates.waiting_new_category_photo)
            await message.answer(
                "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_interact_catalog")]
                    ]
                )
            )
            
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
            await state.clear()
    

    async def process_new_category_photo(self, message: types.Message, state: FSMContext):
        if not message.photo:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            return

        try:
            photo_file_id = message.photo[-1].file_id
            await state.update_data(category_photo_file_id=photo_file_id)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state —Å await
            data = await state.get_data()
            category_name = data["category_name"]
            category_photo_file_id = data["category_photo_file_id"]

            await CategoryManager.add_category(category_name, category_photo_file_id)
            await message.answer(
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup=get_admin_keyboard()
            )
            await state.clear()

        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            await state.clear()

    async def process_flower_name(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∫–∞"""
        flower_name = message.text.strip()
        
        if len(flower_name) < 2:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞ –≤ state
            await state.update_data(flower_name=flower_name)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É
            await state.set_state(AdminStates.waiting_flower_price)
            await message.answer(
                "üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ü–≤–µ—Ç–∫–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_interact_catalog")]
                    ]
                )
            )
            
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
            await state.clear()

    async def process_flower_price(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ü–≤–µ—Ç–∫–∞"""
        try:
            price = float(message.text.strip())
            if price <= 0:
                await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤ state
            await state.update_data(flower_price=price)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            await state.set_state(AdminStates.waiting_flower_caption)
            await message.answer(
                "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞:",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_interact_catalog")]
                    ]
                )
            )
            
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã: {e}")
            await state.clear()

    async def process_flower_caption(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ü–≤–µ—Ç–∫–∞"""
        caption = message.text.strip()
        

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ state
            await state.update_data(flower_caption=caption)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ü–≤–µ—Ç–∫–∞
            await state.set_state(AdminStates.waiting_flower_photo)
            await message.answer(
                "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ü–≤–µ—Ç–∫–∞:",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_interact_catalog")]
                    ]
                )
            )
            
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
            await state.clear()

    async def process_flower_photo(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ü–≤–µ—Ç–∫–∞"""
        if not message.photo:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ü–≤–µ—Ç–∫–∞.")
            return

        try:
            photo_file_id = message.photo[-1].file_id
            
            data = await state.get_data()
            flower_name = data["flower_name"]
            flower_price = data["flower_price"]
            flower_caption = data["flower_caption"]
            flower_category_id = data["flower_category_id"]
            
            await FlowerManager.add_flower(
                name=flower_name,
                price=str(flower_price),
                caption=flower_caption,
                photo_id=photo_file_id,
                category_id=flower_category_id
            )
            
            await message.answer(
                f"‚úÖ –¶–≤–µ—Ç–æ–∫ '{flower_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üåπ –ù–∞–∑–≤–∞–Ω–∏–µ: {flower_name}\n"
                f"üí∞ –¶–µ–Ω–∞: {flower_price}‚ÇΩ\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {flower_caption}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ID: {flower_category_id}",
                reply_markup=get_admin_keyboard()
            )
            await state.clear()
            
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∫–∞: {e}")
            await state.clear()


    async def remove_category(self, callback: types.CallbackQuery, state: FSMContext):
        cat_id = int(callback.data)
        try:
            await CategoryManager.delete_category(cat_id)
            await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! –ß—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=get_admin_keyboard())    
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        finally:
            await callback.answer()
        await state.clear()
    

    async def delete_flower(self, callback: types.CallbackQuery, state: FSMContext):
        flower_id = callback.data
        await FlowerManager.delete_flower(flower_id=int(flower_id))
        await callback.message.edit_text("–£—Å–ø–µ—à–Ω–æ! –ß—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=get_admin_keyboard())
        
        await callback.answer()
        await state.clear()

    async def broadcast_message(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        from ..database.models import UserManager
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM users")
            user_ids = [row[0] for row in cursor.fetchall()]
            conn.close()
            
            sent = 0
            failed = 0
            
            if message.photo:
                # –†–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é
                photo_file_id = message.photo[-1].file_id
                caption = message.caption or ""
                
                for user_id in user_ids:
                    try:
                        await message.bot.send_photo(
                            chat_id=user_id,
                            photo=photo_file_id,
                            caption=caption
                        )
                        sent += 1
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        failed += 1
                        continue
                        
                result_message = f"üì∏ –†–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
                if failed > 0:
                    result_message += f"\n‚ùå –û—à–∏–±–∫–∏: {failed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                    
            else:
                # –†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞
                broadcast_text = message.text
                
                for user_id in user_ids:
                    try:
                        await message.bot.send_message(
                            chat_id=user_id,
                            text=broadcast_text
                        )
                        sent += 1
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        failed += 1
                        continue
                        
                result_message = f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
                if failed > 0:
                    result_message += f"\n‚ùå –û—à–∏–±–∫–∏: {failed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            await message.answer(
                result_message,
                reply_markup=get_admin_keyboard()
            )
            
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}",
                reply_markup=get_admin_keyboard()
            )
        finally:
            await state.clear()

    async def show_orders(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        try:
            from ..database.models import CheckoutManager
            import json
            all_orders = await CheckoutManager.get_all_orders()
            orders = [order for order in all_orders if order[10] != 'completed']  # order[10] - —ç—Ç–æ status
            
            if not orders:
                await callback.message.edit_text(
                    "üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin")]
                        ]
                    )
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
            orders_text = "üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:\n\n"
            
            for i, order in enumerate(orders, 1):
                order_id, user_id, username, first_name, last_name, phone, customer_name, cart_items, total_price, order_date, status = order
                
                # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã –∏–∑ JSON
                try:
                    items = json.loads(cart_items)
                    items_text = ""
                    for item in items:
                        items_text += f"  ‚Ä¢ {item['name']} √ó {item['quantity']} = {item['quantity'] * item['price']}‚ÇΩ\n"
                except:
                    items_text = "  ‚Ä¢ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤\n"
                
                orders_text += f"üî∏ –ó–∞–∫–∞–∑ #{order_id}\n"
                orders_text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {customer_name}\n"
                orders_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                orders_text += f"üí∞ –°—É–º–º–∞: {total_price}‚ÇΩ\n"
                orders_text += f"üìÖ –î–∞—Ç–∞: {order_date}\n"
                orders_text += f"üì¶ –°—Ç–∞—Ç—É—Å: {status}\n"
                orders_text += f"üõí –¢–æ–≤–∞—Ä—ã:\n{items_text}\n"
                orders_text += "‚îÄ" * 40 + "\n\n"
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(orders_text) > 3000:
                    orders_text = orders_text[:3000] + "...\n\n(–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ –∑–∞–∫–∞–∑—ã)"
                    break
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = []
            for order in orders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –∑–∞–∫–∞–∑–æ–≤
                order_id = order[0]
                keyboard.append([
                    types.InlineKeyboardButton(
                        text=f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω #{order_id}", 
                        callback_data=f"complete_order_{order_id}"
                    )
                ])
            
            keyboard.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin")])
            
            await callback.message.edit_text(
                orders_text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
        except Exception as e:
            await callback.message.edit_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: {str(e)}",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin")]
                    ]
                )
            )

    async def show_all_orders(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–≤–∫–ª—é—á–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ) –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        try:
            from ..database.models import CheckoutManager
            import json
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
            orders = await CheckoutManager.get_all_orders()
            
            if not orders:
                await callback.message.edit_text(
                    "üìä –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin")]
                        ]
                    )
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
            orders_text = "üìä –í—Å–µ –∑–∞–∫–∞–∑—ã (–≤–∫–ª—é—á–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ):\n\n"
            
            completed_count = 0
            pending_count = 0
            
            for i, order in enumerate(orders, 1):
                order_id, user_id, username, first_name, last_name, phone, customer_name, cart_items, total_price, order_date, status = order
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if status == 'completed':
                    completed_count += 1
                else:
                    pending_count += 1
                
                # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã –∏–∑ JSON
                try:
                    items = json.loads(cart_items)
                    items_text = ""
                    for item in items:
                        items_text += f"  ‚Ä¢ {item['name']} √ó {item['quantity']} = {item['quantity'] * item['price']}‚ÇΩ\n"
                except:
                    items_text = "  ‚Ä¢ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                status_emoji = "‚úÖ" if status == 'completed' else "‚è≥"
                
                orders_text += f"{status_emoji} –ó–∞–∫–∞–∑ #{order_id}\n"
                orders_text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {customer_name}\n"
                orders_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                orders_text += f"üí∞ –°—É–º–º–∞: {total_price}‚ÇΩ\n"
                orders_text += f"üìÖ –î–∞—Ç–∞: {order_date}\n"
                orders_text += f"üì¶ –°—Ç–∞—Ç—É—Å: {status}\n"
                orders_text += f"üõí –¢–æ–≤–∞—Ä—ã:\n{items_text}\n"
                orders_text += "‚îÄ" * 40 + "\n\n"
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(orders_text) > 3000:
                    orders_text = orders_text[:3000] + "...\n\n(–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ –∑–∞–∫–∞–∑—ã)"
                    break
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω–∞—á–∞–ª–æ
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚è≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {pending_count} | ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {completed_count}\n\n"
            orders_text = stats_text + orders_text
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            keyboard = []
            active_orders = [order for order in orders if order[10] != 'completed']
            for order in active_orders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                order_id = order[0]
                keyboard.append([
                    types.InlineKeyboardButton(
                        text=f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω #{order_id}", 
                        callback_data=f"complete_order_{order_id}"
                    )
                ])
            
            keyboard.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin")])
            
            await callback.message.edit_text(
                orders_text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
        except Exception as e:
            await callback.message.edit_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤: {str(e)}",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin")]
                    ]
                )
            )
        
        